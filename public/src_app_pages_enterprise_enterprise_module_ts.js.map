{"version":3,"file":"src_app_pages_enterprise_enterprise_module_ts.js","mappings":";;;;;;;;;;;;;;;;;AAMO,MAAM,mBAAmB;;sFAAnB,mBAAmB;iHAAnB,mBAAmB;QAFnB,2EAA+B;;;;;;;;;;;;;;;;;;;;;;;;;;ACGpB;AAC8B;AACE;AACc;AAKjC;AAC6B;;;;;AAiB3D,MAAM,gBAAgB;;gFAAhB,gBAAgB;6GAAhB,gBAAgB;iHAbzB,wDAAY;QACZ,4DAAgB;QAChB,wDAAY;QACZ,yDAAa;QACb,4DAAW;QACX,8EAAmB;QACnB,gEAAmB;QACnB,+EAAuB;QACvB,uDAAW;QACX,+DAAmB;mIAIV,gBAAgB,oOAbzB,wDAAY;QACZ,4DAAgB;QAChB,wDAAY;QACZ,yDAAa;QACb,4DAAW;QACX,8EAAmB;QACnB,gEAAmB;QACnB,+EAAuB;QACvB,uDAAW;QACX,+DAAmB;;;;;;;;;;;;;;;;;;AC7BwC;;;;AAQxD,MAAM,iBAAiB;IAM5B,YAAoB,aAA4B,EAAS,UAAqB;QAA1D,kBAAa,GAAb,aAAa,CAAe;QAAS,eAAU,GAAV,UAAU,CAAW;QAI9E,YAAO,GAAG,IAAI,6DAAW,CAAC;YACxB,cAAc,EAAE,kBAAkB;YAClC,aAAa,EAAE,UAAU,IAAI,CAAC,aAAa,CAAC,QAAQ,EAAE,EAAE;SACzD,CAAC,CAAC;QAND,IAAI,CAAC,MAAM,GAAG,aAAa,CAAC,SAAS,EAAE,CAAC;IAC1C,CAAC;IAOD,QAAQ,CAAC,IAAQ;QACf,OAAO,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,MAAM,gBAAgB,EAAC,IAAI,EAAC,EAAC,OAAO,EAAC,IAAI,CAAC,OAAO,EAAC,CAAC,CAAC;IAC1F,CAAC;IAED,MAAM;QACJ,OAAO,IAAI,CAAC,UAAU,CAAC,GAAG,CAAqB,GAAG,IAAI,CAAC,MAAM,YAAY,EAAE,EAAE,OAAO,EAAE,IAAI,CAAC,OAAO,EAAE,CAAC,CAAC;IACxG,CAAC;;kFArBU,iBAAiB;kHAAjB,iBAAiB,WAAjB,iBAAiB,mBAFhB,MAAM;;;;;;;;;;;;;;;;;;;ACL8B;;;;;AAS3C,MAAM,aAAa;IAmExB,YAAoB,OAA0B;QAA1B,YAAO,GAAP,OAAO,CAAmB;QAjE/C,SAAI,GAAC,EAAE,CAAC;QASP,aAAQ,GAAG;YACT,GAAG,EAAE;gBACH,gBAAgB,EAAE,yBAAyB;gBAC3C,mBAAmB,EAAE,8BAA8B;gBACnD,mBAAmB,EAAE,0BAA0B;aAChD;YACD,IAAI,EAAE;gBACJ,iBAAiB,EAAE,yBAAyB;gBAC5C,iBAAiB,EAAE,8BAA8B;gBACjD,mBAAmB,EAAE,0BAA0B;aAChD;YACD,MAAM,EAAE;gBACN,mBAAmB,EAAE,0BAA0B;gBAC/C,aAAa,EAAE,IAAI;aACpB;YACD,OAAO,EAAE;gBAEP,cAAc,EAAE;oBACd,KAAK,EAAE,iBAAiB;oBACxB,IAAI,EAAE,QAAQ;iBACf;gBACD,eAAe,EAAE;oBACf,KAAK,EAAE,YAAY;oBACnB,IAAI,EAAE,QAAQ;iBACf;gBACD,eAAe,EAAE;oBACf,KAAK,EAAE,OAAO;oBACd,IAAI,EAAE,QAAQ;iBACf;gBACD,QAAQ,EAAE;oBACR,KAAK,EAAE,YAAY;oBACnB,IAAI,EAAE,QAAQ;iBACf;gBACD,KAAK,EAAE;oBACL,KAAK,EAAE,QAAQ;oBACf,IAAI,EAAE,QAAQ;iBACf;gBACD,QAAQ,EAAE;oBACR,KAAK,EAAE,IAAI;oBACX,IAAI,EAAE,QAAQ;iBACf;gBACD,UAAU,EAAE;oBACV,KAAK,EAAE,MAAM;oBACb,IAAI,EAAE,QAAQ;iBACf;gBACD,aAAa,EAAE;oBACb,KAAK,EAAE,cAAc;oBACrB,IAAI,EAAE,QAAQ;iBACf;aACF;SACF,CAAC;QAIF,WAAM,GAAoB,IAAI,4DAAe,EAAE,CAAC;IAKhD,CAAC;IAlEH,SAAS,CAAC,MAAW;QACrB,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAC;IAC3C,CAAC;IACD,WAAW,CAAC,MAAW;QACvB,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAC;IAC3C,CAAC;IA+DC,QAAQ;QACN,IAAI,CAAC,OAAO,CAAC,MAAM,EAAE,CAAC,SAAS,CAAC,CAAC,UAA8B,EAAE,EAAE;YACjE,IAAI,CAAC,IAAI,GAAG,UAAU,CAAC;YACvB,OAAO,CAAC,GAAG,CAAC,yBAAyB,EAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YACjD,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAE9B,CAAC,CAAC,CAAC;IAAE,CAAC;IAER,eAAe,CAAC,KAAK;QACnB,IAAI,MAAM,CAAC,OAAO,CAAC,kCAAkC,CAAC,EAAE;YACtD,KAAK,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC;SACzB;aAAM;YACL,KAAK,CAAC,OAAO,CAAC,MAAM,EAAE,CAAC;SACxB;IACH,CAAC;;0EAtFU,aAAa;2GAAb,aAAa;QCV1B,0EAAS;QAEH,uEACF;QAAA,4DAAiB;QAEjB,+EAAc;QAGX,oKAAiB,2BAAuB,IAAC,0FACjC,qBAAiB,IADgB,8FAEhC,uBAAmB,IAFa;QAI1C,4DAAkB;;QALjB,0DAAqB;QAArB,kFAAqB;;;;;;;;;;;;;;;;;;;;;ACNwC;;;;;;;ICWtD,0EAA8D;IAC5D,uDACF;IAAA,4DAAM;;;IADJ,0DACF;IADE,gHACF;;;IAOA,0EAA6D;IAC3D,uDACF;IAAA,4DAAM;;;IADJ,0DACF;IADE,+GACF;;;IAOA,0EAA8D;IAC5D,uDACF;IAAA,4DAAM;;;IADJ,0DACF;IADE,gHACF;;;IAOA,0EAA8D;IAC5D,uDACF;IAAA,4DAAM;;;IADJ,0DACF;IADE,gHACF;;;IAOA,0EAA2D;IACzD,uDACF;IAAA,4DAAM;;;IADJ,0DACF;IADE,6GACF;;;IASE,0EAAgE;IAC9D,uDACF;IAAA,4DAAM;;;IADJ,0DACF;IADE,kHACF;;;IASF,0EAAgE;IAC9D,uDACF;IAAA,4DAAM;;;IADJ,0DACF;IADE,kHACF;;;IAOA,0EAAiE;IAC/D,uDACF;IAAA,4DAAM;;;IADJ,0DACF;IADE,mHACF;;ADxEP,MAAM,YAAY;IAGvB,YACU,WAAwB,EACxB,OAA0B;QAD1B,gBAAW,GAAX,WAAW,CAAa;QACxB,YAAO,GAAP,OAAO,CAAmB;IACjC,CAAC;IAEJ,QAAQ;QACN,IAAI,CAAC,QAAQ,EAAE,CAAC;IAClB,CAAC;IAED,QAAQ;QACN,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC;YAC3C,UAAU,EAAE,CAAC,EAAE,EAAE,CAAC,+DAAmB,EAAE,4DAAgB,CAAC,CAAC;YACzD,SAAS,EAAE,CAAC,EAAE,EAAE,+DAAmB,CAAC;YACpC,UAAU,EAAE,CAAC,EAAE,EAAE,+DAAmB,CAAC;YACrC,UAAU,EAAE,CAAC,EAAE,EAAE,+DAAmB,CAAC;YACrC,OAAO,EAAE,CAAC,EAAE,EAAE,+DAAmB,CAAC;YAClC,YAAY,EAAE,CAAC,EAAE,EAAE,+DAAmB,CAAC;YACvC,YAAY,EAAE,CAAC,EAAE,EAAE,+DAAmB,CAAC;YACvC,aAAa,EAAE,CAAC,EAAE,EAAE,CAAC,+DAAmB,EAAE,gEAAoB,CAAC,CAAC,CAAC,CAAC,CAAC;SACpE,CAAC,CAAC;IACL,CAAC;IAED,QAAQ;QACN,IAAI,IAAI,CAAC,cAAc,CAAC,KAAK,EAAE;YAC7B,MAAM,iBAAiB,GAAG,IAAI,IAAI,EAAE,CAAC,OAAO,EAAE,CAAC;YAC/C,MAAM,QAAQ,GAAG,IAAI,CAAC,cAAc,CAAC,KAAK,CAAC;YAE3C,MAAM,gBAAgB,GAAG;gBACvB,cAAc,EAAE,QAAQ,CAAC,SAAS;gBAClC,eAAe,EAAE,QAAQ,CAAC,YAAY;gBACtC,MAAM,EAAE,IAAI;gBACZ,eAAe,EAAE,iBAAiB;gBAClC,QAAQ,EAAE,QAAQ,CAAC,UAAU;gBAC7B,QAAQ,EAAE,QAAQ,CAAC,OAAO;gBAC1B,KAAK,EAAE,QAAQ,CAAC,UAAU;gBAC1B,UAAU,EAAE,QAAQ,CAAC,UAAU;gBAC/B,aAAa,EAAE,QAAQ,CAAC,YAAY;gBACpC,QAAQ,EAAE,QAAQ,CAAC,aAAa;gBAChC,IAAI,EAAE,EAAE;aACT,CAAC;YAEF,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,gBAAgB,CAAC,CAAC,SAAS,CAC/C,CAAC,IAAI,EAAE,EAAE;gBACP,OAAO,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC;YAC3B,CAAC,EACD,CAAC,KAAK,EAAE,EAAE;gBACR,OAAO,CAAC,KAAK,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;YAChC,CAAC,CACF,CAAC;YAEF,OAAO,CAAC,GAAG,CAAC,YAAY,EAAE,QAAQ,CAAC,CAAC;SACrC;aAAM;YACL,OAAO,CAAC,GAAG,CAAC,uBAAuB,CAAC,CAAC;SACtC;IACH,CAAC;IAED,cAAc,CAAC,SAAiB;QAC9B,MAAM,OAAO,GAAG,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;QACnD,OAAO,OAAO,CAAC,CAAC,CAAC,OAAO,CAAC,OAAO,IAAI,CAAC,OAAO,CAAC,KAAK,IAAI,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC;IACjF,CAAC;IAED,eAAe,CAAC,SAAiB;QAC/B,MAAM,OAAO,GAAG,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;QACnD,IAAI,OAAO,IAAI,OAAO,CAAC,MAAM,EAAE;YAC7B,IAAI,OAAO,CAAC,MAAM,CAAC,QAAQ,EAAE;gBAC3B,OAAO,wBAAwB,CAAC;aACjC;YACD,IAAI,OAAO,CAAC,MAAM,CAAC,KAAK,EAAE;gBACxB,OAAO,sBAAsB,CAAC;aAC/B;YACD,IAAI,OAAO,CAAC,MAAM,CAAC,SAAS,EAAE;gBAC5B,OAAO,qBAAqB,OAAO,CAAC,MAAM,CAAC,SAAS,CAAC,cAAc,EAAE,CAAC;aACvE;YACD,6DAA6D;SAC9D;QACD,OAAO,EAAE,CAAC;IACZ,CAAC;;wEA/EU,YAAY;0GAAZ,YAAY;QCRzB,yEAAiB;QAGO,kFAAuB;QAAA,4DAAiB;QACxD,+EAAc;QACuB,wIAAY,cAAU,IAAC;QACxD,yEAA4B;QACqC,gEAAK;QAAA,4DAAQ;QAC5E,0EAAsB;QACpB,uEAAuF;QACzF,4DAAM;QACN,0GAEM;QACR,4DAAM;QACN,0EAA4B;QACmC,gEAAI;QAAA,4DAAQ;QACzE,0EAAsB;QACpB,uEAA+F;QACjG,4DAAM;QACN,0GAEM;QACR,4DAAM;QACN,0EAA4B;QACoC,iEAAK;QAAA,4DAAQ;QAC3E,0EAAsB;QACpB,wEAAiG;QACnG,4DAAM;QACN,0GAEM;QACR,4DAAM;QACN,0EAA4B;QACoC,gEAAI;QAAA,4DAAQ;QAC1E,0EAAsB;QACpB,wEAAgG;QAClG,4DAAM;QACN,0GAEM;QACR,4DAAM;QACN,0EAA4B;QACiC,8DAAE;QAAA,4DAAQ;QACrE,0EAAsB;QACpB,wEAA2F;QAC7F,4DAAM;QACN,0GAEM;QACR,4DAAM;QAEN,0EAA4B;QACwC,+EAAmB;QAAA,4DAAQ;QAC3F,0EAAsB;QACpB,wEAA0G;QAC5G,4DAAM;QAEN,0GAEM;QACR,4DAAM;QAER,0EAA4B;QACsC,6EAAiB;QAAA,4DAAQ;QACzF,0EAAsB;QACpB,wEAAqG;QACvG,4DAAM;QAEN,0GAEM;QACR,4DAAM;QACN,0EAA4B;QACwC,oEAAQ;QAAA,4DAAQ;QAClF,0EAAsB;QACpB,wEAAgG;QAClG,4DAAM;QACN,0GAEM;QACR,4DAAM;QAEN,0EAA4B;QAEwB,+EAAmB;QAAA,4DAAS;QAUxF,0EAAsB;QAIF,sEAAU;QAAA,4DAAiB;QAC3C,gFAAc;QAIoC,sEAAU;QAAA,4DAAQ;QAC5D,wEAAkF;QACpF,4DAAM;QAER,2EAAsB;QAEuB,qEAAS;QAAA,4DAAQ;QAC1D,wEAAgF;QAClF,4DAAM;QAGV,0EAAiB;QAG2B,iEAAK;QAAA,4DAAQ;QACnD,wEAA0E;QAC5E,4DAAM;QAER,2EAAsB;QAEsB,mEAAO;QAAA,4DAAQ;QACvD,wEAA6E;QAC/E,4DAAM;QAGV,8EAA+B;QAAA,kEAAM;QAAA,4DAAS;;QA5HxC,0DAA4B;QAA5B,yFAA4B;QAMxB,0DAAkC;QAAlC,kGAAkC;QASlC,0DAAiC;QAAjC,iGAAiC;QASjC,0DAAkC;QAAlC,kGAAkC;QASlC,0DAAkC;QAAlC,kGAAkC;QASlC,0DAA+B;QAA/B,+FAA+B;QAW7B,0DAAoC;QAApC,oGAAoC;QAWtC,0DAAoC;QAApC,oGAAoC;QASpC,0DAAqC;QAArC,qGAAqC;;;;;;;;;;;;;;;;;;;;;;AC9EF;AACK;AACN;AACH;;;AAEnD,MAAM,MAAM,GAAW;IACrB;QACE,IAAI,EAAE,EAAE;QACR,SAAS,EAAE,qEAAmB;QAC9B,QAAQ,EAAE;YACR;gBACE,IAAI,EAAE,MAAM;gBACZ,SAAS,EAAE,+DAAa;aACzB;YACD;gBACE,IAAI,EAAE,KAAK;gBACX,SAAS,EAAE,4DAAY;aACxB;SAEF;KACF;CACF,CAAC;AAWK,MAAM,uBAAuB;;8FAAvB,uBAAuB;oHAAvB,uBAAuB;wHANhC,kEAAqB,CAAC,MAAM,CAAC,EAG7B,yDAAY;mIAGH,uBAAuB,oFAHhC,yDAAY;AAIT,MAAM,gBAAgB,GAAG;IAC9B,qEAAmB;IACnB,+DAAa;IACb,4DAAY;CAEb,CAAC","sources":["./src/app/pages/enterprise/EnterpriseComponent.ts","./src/app/pages/enterprise/enterprise.module.ts","./src/app/pages/enterprise/enterprise.service.ts","./src/app/pages/enterprise/list/list.component.ts","./src/app/pages/enterprise/list/list.component.html","./src/app/pages/enterprise/new/new.component.ts","./src/app/pages/enterprise/new/new.component.html","./src/app/pages/enterprise/routing-enterprise.module.ts"],"sourcesContent":["import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'ngx-tables',\r\n  template: `<router-outlet></router-outlet>`,\r\n})\r\nexport class EnterpriseComponent {\r\n}\r\n","import { NgModule } from \"@angular/core\";\nimport {\n  NbCardModule,\n  NbTreeGridModule,\n  NbIconModule,\n  NbInputModule,\n  NbCardHeaderComponent,\n} from \"@nebular/theme\";\nimport { Ng2SmartTableModule } from \"ng2-smart-table\";\nimport { ThemeModule } from \"../../@theme/theme.module\";\nimport { TablesRoutingModule } from \"../tables/tables-routing.module\";\n\nimport {\n  RoutingEnterpriseModule,\n  routedComponents,\n} from \"./routing-enterprise.module\";\nimport { FormsModule, ReactiveFormsModule } from \"@angular/forms\";\n\n@NgModule({\n  imports: [\n    NbCardModule,\n    NbTreeGridModule,\n    NbIconModule,\n    NbInputModule,\n    ThemeModule,\n    TablesRoutingModule,\n    Ng2SmartTableModule,\n    RoutingEnterpriseModule,\n    FormsModule,\n    ReactiveFormsModule\n  ],\n  declarations: [...routedComponents],\n})\nexport class EnterpriseModule {}\n","import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { ConfigService } from '../../services/config.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class EnterpriseService {\n\n  apiUrl: String;\n  token:String;\n  \n\n  constructor(private configService: ConfigService,private httpClient:HttpClient) {\n    this.apiUrl = configService.getApiUrl();\n  }\n\n  headers = new HttpHeaders({\n    'Content-Type': 'application/json',\n    Authorization: `Bearer ${this.configService.getToken()}`\n  });\n\n  register(user:any){\n    return this.httpClient.post(`${this.apiUrl}enterprise/new`,user,{headers:this.headers});\n  }\n\n  getAll(): Observable<EnterpriseObject[]> {\n    return this.httpClient.get<EnterpriseObject[]>(`${this.apiUrl}enterprise`, { headers: this.headers });\n  }\n\n}\n\ninterface EnterpriseObject {\n  enterpriseName: string;\n  numContribuable: string;\n  enable: boolean;\n  enterpriseToken: number;\n  createAt: string;\n  omNumber: string;\n  momoNumber: string;\n  accountNumber: string;\n  bank: any[]; // You might want to specify the actual type for 'bank'\n}\n","import { Component, OnInit } from '@angular/core';\nimport { LocalDataSource } from 'ng2-smart-table';\nimport { EnterpriseService } from '../enterprise.service';\n\n\n@Component({\n  selector: 'ngx-list',\n  templateUrl: './list.component.html',\n  styleUrls: ['./list.component.scss']\n})\nexport class ListComponent implements OnInit {\n\n data=[];\n\nonRowEdit($event: any) {\nthrow new Error('Method not implemented.');\n}\nonRowDelete($event: any) {\nthrow new Error('Method not implemented.');\n}\n\n  settings = {\n    add: {\n      addButtonContent: '<i class=\"nb-plus\"></i>',\n      createButtonContent: '<i class=\"nb-checkmark\"></i>',\n      cancelButtonContent: '<i class=\"nb-close\"></i>',\n    },\n    edit: {\n      editButtonContent: '<i class=\"nb-edit\"></i>',\n      saveButtonContent: '<i class=\"nb-checkmark\"></i>',\n      cancelButtonContent: '<i class=\"nb-close\"></i>',\n    },\n    delete: {\n      deleteButtonContent: '<i class=\"nb-trash\"></i>',\n      confirmDelete: true,\n    },\n    columns: {\n      \n      enterpriseName: {\n        title: 'Enterprise Name',\n        type: 'string',\n      },\n      numContribuable: {\n        title: 'N. Contrib',\n        type: 'string',\n      },\n      enterpriseToken: {\n        title: 'Code ',\n        type: 'string',\n      },\n      createAt: {\n        title: 'Created At',\n        type: 'string',\n      },\n      email: {\n        title: 'E-mail',\n        type: 'string',\n      },\n      omNumber: {\n        title: 'OM',\n        type: 'string',\n      },\n      momoNumber: {\n        title: 'Momo',\n        type: 'number',\n      },\n      accountNumber: {\n        title: 'Bank account',\n        type: 'number',\n      },\n    },\n  };\n\n\n\n  source: LocalDataSource = new LocalDataSource();\n\n  constructor(private service: EnterpriseService) {\n\n   \n  }\n \n  ngOnInit(): void {\n    this.service.getAll().subscribe((enterprise: EnterpriseObject[]) => {\n      this.data = enterprise;\n      console.log('Logger >>>>>>>>>>>>>>>>',this.data);\n      this.source.load(this.data);\n\n    });  }\n\n  onDeleteConfirm(event): void {\n    if (window.confirm('Are you sure you want to delete?')) {\n      event.confirm.resolve();\n    } else {\n      event.confirm.reject();\n    }\n  }\n\n}\ninterface EnterpriseObject {\n  enterpriseName: string;\n  numContribuable: string;\n  enable: boolean;\n  enterpriseToken: number;\n  createAt: string;\n  omNumber: string;\n  momoNumber: string;\n  accountNumber: string;\n  bank: any[]; // You might want to specify the actual type for 'bank'\n}","<nb-card>\n    <nb-card-header>\n      Users list\n    </nb-card-header>\n  \n    <nb-card-body>\n      <ng2-smart-table \n       [settings]=\"settings\" [source]=\"source\" \n       (deleteConfirm)=\"onDeleteConfirm($event)\" \n       (edit)=\"onRowEdit($event)\"\n      (delete)=\"onRowDelete($event)\"  \n       >\n      </ng2-smart-table>\n    </nb-card-body>\n  </nb-card>\n  ","import { Component, OnInit } from \"@angular/core\";\nimport { FormGroup, FormBuilder, Validators } from \"@angular/forms\";\nimport { EnterpriseService } from \"../enterprise.service\";\n\n@Component({\n  selector: \"ngx-new\",\n  templateUrl: \"./new.component.html\",\n  styleUrls: [\"./new.component.scss\"],\n})\nexport class NewComponent implements OnInit {\n  enterpriseForm: FormGroup;\n\n  constructor(\n    private formBuilder: FormBuilder,\n    private service: EnterpriseService\n  ) {}\n\n  ngOnInit(): void {\n    this.initForm();\n  }\n\n  initForm(): void {\n    this.enterpriseForm = this.formBuilder.group({\n      inputemail: [\"\", [Validators.required, Validators.email]],\n      inputname: [\"\", Validators.required],\n      inputphone: [\"\", Validators.required],\n      inputpmomo: [\"\", Validators.required],\n      inputom: [\"\", Validators.required],\n      inputcontrib: [\"\", Validators.required],\n      inputaccount: [\"\", Validators.required],\n      inputpassword: [\"\", [Validators.required, Validators.minLength(6)]],\n    });\n  }\n\n  onSubmit(): void {\n    if (this.enterpriseForm.valid) {\n      const currentTimeMillis = new Date().getTime();\n      const formData = this.enterpriseForm.value;\n\n      const enterpriseObject = {\n        enterpriseName: formData.inputname,\n        numContribuable: formData.inputcontrib,\n        enable: true,\n        enterpriseToken: currentTimeMillis,\n        emailACC: formData.inputemail,\n        omNumber: formData.inputom,\n        phone: formData.inputphone,\n        momoNumber: formData.inputpmomo,\n        accountNumber: formData.inputaccount,\n        password: formData.inputpassword,\n        bank: [],\n      };\n\n      this.service.register(enterpriseObject).subscribe(\n        (data) => {\n          console.log(\"SUCCESS !\");\n        },\n        (error) => {\n          console.error(\"ERROR\", error);\n        }\n      );\n\n      console.log(\"Form data:\", formData);\n    } else {\n      console.log(\"Form data has errors.\");\n    }\n  }\n\n  isFieldInvalid(fieldName: string): boolean {\n    const control = this.enterpriseForm.get(fieldName);\n    return control ? control.invalid && (control.dirty || control.touched) : false;\n  }\n\n  getErrorMessage(fieldName: string): string {\n    const control = this.enterpriseForm.get(fieldName);\n    if (control && control.errors) {\n      if (control.errors.required) {\n        return \"This field is required\";\n      }\n      if (control.errors.email) {\n        return \"Invalid email format\";\n      }\n      if (control.errors.minLength) {\n        return `Minimum length is ${control.errors.minLength.requiredLength}`;\n      }\n      // Add more error messages for different validators as needed\n    }\n    return \"\";\n  }\n}\n","\n<div class=\"row\">\n    <div class=\"col-md-6\">\n      <nb-card>\n        <nb-card-header>Register new Enterprise</nb-card-header>\n        <nb-card-body>\n          <form [formGroup]=\"enterpriseForm\" (ngSubmit)=\"onSubmit()\">\n            <div class=\"form-group row\">\n              <label for=\"inputEmail1\" class=\"label col-sm-3 col-form-label\">Email</label>\n              <div class=\"col-sm-9\">\n                <input type=\"email\" nbInput fullWidth formControlName=\"inputemail\" placeholder=\"Email\">\n              </div>\n              <div *ngIf=\"isFieldInvalid('inputemail')\" class=\"text-danger\">\n                {{ getErrorMessage('inputemail') }}\n              </div>\n            </div>\n            <div class=\"form-group row\">\n              <label for=\"inputname\" class=\"label col-sm-3 col-form-label\">Name</label>\n              <div class=\"col-sm-9\">\n                <input type=\"text\" nbInput fullWidth formControlName=\"inputname\" placeholder=\"Enterprise name\">\n              </div>\n              <div *ngIf=\"isFieldInvalid('inputname')\" class=\"text-danger\">\n                {{ getErrorMessage('inputname') }}\n              </div>\n            </div>\n            <div class=\"form-group row\">\n              <label for=\"inputphone\" class=\"label col-sm-3 col-form-label\">Phone</label>\n              <div class=\"col-sm-9\">\n                <input type=\"text\" nbInput fullWidth formControlName=\"inputphone\" placeholder=\"Enterprise phone\">\n              </div>\n              <div *ngIf=\"isFieldInvalid('inputphone')\" class=\"text-danger\">\n                {{ getErrorMessage('inputphone') }}\n              </div>\n            </div>\n            <div class=\"form-group row\">\n              <label for=\"inputpmomo\" class=\"label col-sm-3 col-form-label\">Momo</label>\n              <div class=\"col-sm-9\">\n                <input type=\"text\" nbInput fullWidth formControlName=\"inputpmomo\" placeholder=\"Enterprise Momo\">\n              </div>\n              <div *ngIf=\"isFieldInvalid('inputpmomo')\" class=\"text-danger\">\n                {{ getErrorMessage('inputpmomo') }}\n              </div>\n            </div>\n            <div class=\"form-group row\">\n              <label for=\"inputom\" class=\"label col-sm-3 col-form-label\">OM</label>\n              <div class=\"col-sm-9\">\n                <input type=\"text\" nbInput fullWidth formControlName=\"inputom\" placeholder=\"Enterprise OM\">\n              </div>\n              <div *ngIf=\"isFieldInvalid('inputom')\" class=\"text-danger\">\n                {{ getErrorMessage('inputom') }}\n              </div>\n            </div>\n\n            <div class=\"form-group row\">\n                <label for=\"inputcontrib\" class=\"label col-sm-3 col-form-label\">Num Account banking</label>\n                <div class=\"col-sm-9\">\n                  <input type=\"text\" nbInput fullWidth formControlName=\"inputaccount\" placeholder=\"Enterprise Bank account\">\n                </div>\n    \n                <div *ngIf=\"isFieldInvalid('inputaccount')\" class=\"text-danger\">\n                  {{ getErrorMessage('inputaccount') }}\n                </div>\n              </div>\n            \n            <div class=\"form-group row\">\n              <label for=\"inputcontrib\" class=\"label col-sm-3 col-form-label\">Num Contribualble</label>\n              <div class=\"col-sm-9\">\n                <input type=\"text\" nbInput fullWidth formControlName=\"inputcontrib\" placeholder=\"Enterprise contrib\">\n              </div>\n  \n              <div *ngIf=\"isFieldInvalid('inputcontrib')\" class=\"text-danger\">\n                {{ getErrorMessage('inputcontrib') }}\n              </div>\n            </div>\n            <div class=\"form-group row\">\n              <label for=\"inputPassword2\" class=\"label col-sm-3 col-form-label\">Password</label>\n              <div class=\"col-sm-9\">\n                <input type=\"password\" nbInput fullWidth formControlName=\"inputpassword\" placeholder=\"Password\">\n              </div>\n              <div *ngIf=\"isFieldInvalid('inputpassword')\" class=\"text-danger\">\n                {{ getErrorMessage('inputpassword') }}\n              </div>\n            </div>\n            \n            <div class=\"form-group row\">\n              <div class=\"offset-sm-3 col-sm-9\">\n                <button type=\"submit\" nbButton status=\"primary\">Register Enterprise</button>\n              </div>\n            </div>\n          </form>\n        </nb-card-body>\n      </nb-card>\n  \n     \n    </div>\n  \n    <div class=\"col-md-6\">\n      \n  \n      <nb-card>\n        <nb-card-header>Block form</nb-card-header>\n        <nb-card-body>\n          <div class=\"row\">\n            <div class=\"col-sm-6\">\n              <div class=\"form-group\">\n                <label for=\"inputFirstName\" class=\"label\">First Name</label>\n                <input type=\"text\" nbInput fullWidth id=\"inputFirstName\" placeholder=\"First Name\">\n              </div>\n            </div>\n            <div class=\"col-sm-6\">\n              <div class=\"form-group\">\n                <label for=\"inputLastName\" class=\"label\">Last Name</label>\n                <input type=\"text\" nbInput fullWidth id=\"inputLastName\" placeholder=\"Last Name\">\n              </div>\n            </div>\n          </div>\n          <div class=\"row\">\n            <div class=\"col-sm-6\">\n              <div class=\"form-group\">\n                <label for=\"inputEmail\" class=\"label\">Email</label>\n                <input type=\"email\" nbInput fullWidth id=\"inputEmail\" placeholder=\"Email\">\n              </div>\n            </div>\n            <div class=\"col-sm-6\">\n              <div class=\"form-group\">\n                <label for=\"inputWebsite\" class=\"label\">Website</label>\n                <input type=\"text\" nbInput fullWidth id=\"inputWebsite\" placeholder=\"Website\">\n              </div>\n            </div>\n          </div>\n          <button type=\"submit\" nbButton>Submit</button>\n        </nb-card-body>\n      </nb-card>\n    </div>\n  </div>\n  \n  \n  ","import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { EnterpriseComponent } from './EnterpriseComponent';\nimport { ListComponent } from './list/list.component';\nimport { NewComponent } from './new/new.component';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: EnterpriseComponent,\n    children: [\n      {\n        path: 'list',\n        component: ListComponent,\n      },\n      {\n        path: 'new',\n        component: NewComponent,\n      },\n      \n    ],\n  },\n];\n\n\n@NgModule({\n  imports: [\n    RouterModule.forChild(routes),\n  ],\n  exports: [\n    RouterModule,\n  ],\n})\nexport class RoutingEnterpriseModule { }\nexport const routedComponents = [\n  EnterpriseComponent,\n  ListComponent,\n  NewComponent\n\n];\n"],"names":[],"sourceRoot":"webpack:///","x_google_ignoreList":[]}